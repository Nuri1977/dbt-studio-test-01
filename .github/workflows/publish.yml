name: Publish

on:
  push:
    branches:
      - dev

jobs:
  publish-mac:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: |
          npm install
          npm run postinstall

      - name: Build project
        run: npm run build

      - name: Publish for macOS
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASS }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          npm exec electron-builder -- --publish always --mac

  publish-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: |
          npm install
          npm run postinstall

      - name: Build project
        run: npm run build

      - name: Build and upload unsigned draft release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Build and upload unsigned to draft release
          npm exec electron-builder -- --publish always --win

      - name: Fetch unsigned asset download URLs
        id: fetch_assets
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          RELEASE=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.tag_name == "'$TAG'" and .draft == true)')

          echo "$RELEASE" | jq -r '.assets[] | select(.name | endswith(".exe") or endswith(".dll")) | [.name, .browser_download_url] | @tsv' > assets.tsv

          mkdir unsigned

          while IFS=$'\t' read -r name url; do
            echo "Downloading $name..."
            curl -L -H "Authorization: token ${{ secrets.GH_TOKEN }}" "$url" -o "unsigned/$name"
          done < assets.tsv

      - name: Sign Windows binaries
        uses: azure/trusted-signing-action@v0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: RosettaLabs
          certificate-profile-name: dbt-studio
          files-folder: unsigned
          files-folder-filter: exe,dll
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Create final (published) GitHub Release
        run: |
          gh release delete "1.0.7" --yes || true
          gh release create "1.0.7" --title "Rosetta dbt Studio v1.0.7" --notes "Signed and published release"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload signed artifacts to GitHub Release
        run: |
          gh release upload "1.0.7" unsigned/*.exe unsigned/*.dll --clobber
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  publish-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: |
          npm install
          npm run postinstall

      - name: Build project
        run: npm run build

      - name: Publish for Linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          npm exec electron-builder -- --publish always --linux deb rpm
